/*
 *  RapidMiner
 *
 *  Copyright (C) 2001-2007 by Rapid-I and the contributors
 *
 *  Complete list of developers available at our web site:
 *
 *       http://rapid-i.com
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License as 
 *  published by the Free Software Foundation; either version 2 of the
 *  License, or (at your option) any later version. 
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 *  USA.
 */
package com.rapidminer.operator.meta;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.rapidminer.Process;
import com.rapidminer.RapidMiner;
import com.rapidminer.operator.Operator;
import com.rapidminer.operator.ResultObjectAdapter;
import com.rapidminer.operator.Saveable;
import com.rapidminer.operator.performance.PerformanceVector;
import com.rapidminer.tools.LogService;
import com.rapidminer.tools.Tools;


/**
 * A set of parameters generated by a <code>ParameterOptimizationOperator</code>.
 * 
 * @author Simon Fischer, Ingo Mierswa
 * @version $Id: ParameterSet.java,v 1.2 2007/06/07 17:12:22 ingomierswa Exp $
 */
public class ParameterSet extends ResultObjectAdapter implements Saveable {

	private static final long serialVersionUID = -2615523039124583537L;

	/** The best value of a parameter of an operator. */
	private static class ParameterValue implements Serializable {

		private static final long serialVersionUID = -6847818423564185071L;

		private String operator;

		private String parameterKey;

		private String parameterValue;

		private ParameterValue(String operator, String parameterKey, String parameterValue) {
			this.operator = operator;
			this.parameterKey = parameterKey;
			this.parameterValue = parameterValue;
		}

        public String getOperator() { return operator; }
        
        public String getParameterKey() { return parameterKey; }
        
        public String getParameterValue() { return parameterValue; }
        
		public String toString() {
			return operator + "." + parameterKey + "\t= " + parameterValue;
		}

		public void apply(Process process, Map nameMap) {
			String opName = (String) nameMap.get(operator);
			if (opName == null)
				opName = operator;
			process.getLog().log("Setting parameter '" + parameterKey + "' of operator '" + opName + "' to '" + parameterValue + "'.", LogService.STATUS);
			Operator operator = process.getOperator(opName);
			if (operator == null) {
				process.getLog().log("No such operator: '" + opName + "'.", LogService.STATUS);
			} else {
				operator.getParameters().setParameter(parameterKey, parameterValue);
			}
		}
	}

	private List<ParameterValue> parameterValues = new LinkedList<ParameterValue>();

	private PerformanceVector performance;

	/** Private constructor for the read() method. */
	private ParameterSet() {}

	/**
	 * Constructs a new ParameterSet. The three arrays must have equal length.
	 * For each <i>i</i>, the ParameterSet specifies the value
	 * <code>values[i]</code> for the parameter <code>parameters[i]</code>
	 * of the operator named <code>operators[i]</code>.
	 */
	public ParameterSet(Operator[] operators, String[] parameters, String[] values, PerformanceVector value) {
		if ((operators.length != parameters.length) || (operators.length != values.length)) {
			throw new IllegalArgumentException("The arrays operators, parameters, and values must be of equal size!");
		}
		for (int i = 0; i < operators.length; i++) {
			parameterValues.add(new ParameterValue(operators[i].getName(), parameters[i], values[i]));
		}
		this.performance = value;
	}

	public String getName() {
		return "ParameterSet";
	}


	public String toString() {
        StringBuffer str = new StringBuffer("Parameter set:" + Tools.getLineSeparator());
        str.append(Tools.getLineSeparator() + "Performance: " + performance + Tools.getLineSeparator());
        Iterator i = parameterValues.iterator();
        while (i.hasNext()) {
            str.append(i.next().toString() + Tools.getLineSeparator());
        }
        return str.toString();
	}

	/**
	 * Returns the performance of this parameter set. Attension: This may be
	 * null if the ParameterSet was read from a file.
	 */
	public PerformanceVector getPerformance() {
		return performance;
	}

	/**
	 * Applies all parameters in the set to their operators. The entries in the
	 * nameMap can be used if the names of the operators in two processes (one
	 * parameter optimisation process and one application process) are not
	 * the same. Each entry in nameMap maps the name read from the file to the
	 * name of the operator in the process definition.
	 */
	public void applyAll(Process process, Map nameMap) {
		Iterator i = parameterValues.iterator();
		while (i.hasNext()) {
			((ParameterValue) i.next()).apply(process, nameMap);
		}
	}

	public void save(File file) throws IOException {
		writeParameterSet(new PrintWriter(new FileWriter(file)), "utf-8");
	}

	public String getExtension() { return "par"; }
	
	public String getFileDescription() { return "parameter set file"; }
	
	public void writeParameterSet(PrintWriter out, String encoding) {
        out.println("<?xml version=\"1.0\" encoding=\"" + encoding + "\"?>");
        out.println("<parameterset version=\"" + RapidMiner.getVersion() + "\">");
        Iterator<ParameterValue> i = parameterValues.iterator();
        while (i.hasNext()) {
            ParameterValue value = i.next();
            out.println("    <parameter operator=\"" + value.getOperator() + "\" key=\"" + value.getParameterKey() + "\" value=\"" + value.getParameterValue() + "\"/>");
        }
        out.println("</parameterset>");
	}

	/** Reads a parameter set from a file. */
	public static ParameterSet readParameterSet(InputStream in) throws IOException {
        ParameterSet parameterSet = new ParameterSet();
        Document document = null;
        try {
            document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in);
        } catch (SAXException e1) {
            throw new IOException(e1.getMessage());
        } catch (ParserConfigurationException e1) {
            throw new IOException(e1.getMessage());
        }

        Element parametersElement = document.getDocumentElement();
        if (!parametersElement.getTagName().equals("parameterset")) {
            throw new IOException("Outer tag of parameter set file must be <parameterset>");
        }
        
        NodeList parameters = parametersElement.getChildNodes();
        for (int i = 0; i < parameters.getLength(); i++) {
            Node node = parameters.item(i);
            if (node instanceof Element) {
                Element parameterTag = (Element)node;
                String tagName = parameterTag.getTagName();
                if (!tagName.equals("parameter"))
                    throw new IOException("Only tags <parameter> are allowed, was " + tagName);
                String operatorName = parameterTag.getAttribute("operator");
                String parameterKey = parameterTag.getAttribute("key");
                String parameterValue = parameterTag.getAttribute("value");
                parameterSet.parameterValues.add(new ParameterValue(operatorName, parameterKey, parameterValue));    
            }
        }
		return parameterSet;
	}
}
