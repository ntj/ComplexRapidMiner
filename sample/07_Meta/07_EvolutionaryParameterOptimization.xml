<?xml version="1.0" encoding="UTF-8"?>
<process version="4.0beta2">

  <operator name="Root" class="Process">
      <description text="#ylt#p#ygt#This experiment is also a parameter optimization experiment like the first one discussed in the meta group. In this case, an evolutionary approach is used for the search of the best parameter combination. This approach is often more appropriate and leads to better results without defining the parameter combinations which should be tested (as for the Grid Search and  the quadratic parameter optimization approaches).#ylt#/p#ygt# #ylt#p#ygt#The parameters for the evolutionary parameter optimization approach are defined in the same way as for the other parameter optimization operators. Instead of a comma separated list of parameters which should be checked the user has to define a colon separated pair which is used as lower and upper bound for the specific parameters.#ylt#/p#ygt# "/>
      <operator name="ExampleSource" class="ExampleSource">
          <parameter key="attributes"	value="../data/polynomial.aml"/>
      </operator>
      <operator name="ParameterOptimization" class="EvolutionaryParameterOptimization">
          <parameter key="crossover_prob"	value="1.0"/>
          <parameter key="max_generations"	value="10"/>
          <list key="parameters">
            <parameter key="LibSVMLearner.C"	value="0.1:100"/>
            <parameter key="LibSVMLearner.degree"	value="2:7"/>
          </list>
          <parameter key="tournament_fraction"	value="0.75"/>
          <operator name="IteratingPerformanceAverage" class="IteratingPerformanceAverage">
              <parameter key="iterations"	value="3"/>
              <operator name="Validation" class="XValidation">
                  <parameter key="number_of_validations"	value="2"/>
                  <parameter key="sampling_type"	value="shuffled sampling"/>
                  <operator name="LibSVMLearner" class="LibSVMLearner">
                      <parameter key="C"	value="72.32051993983198"/>
                      <parameter key="kernel_type"	value="poly"/>
                      <parameter key="svm_type"	value="epsilon-SVR"/>
                  </operator>
                  <operator name="ApplierChain" class="OperatorChain">
                      <operator name="Test" class="ModelApplier">
                          <list key="application_parameters">
                          </list>
                      </operator>
                      <operator name="SimplePerformance" class="SimplePerformance">
                      </operator>
                  </operator>
              </operator>
          </operator>
          <operator name="Log" class="ProcessLog">
              <parameter key="filename"	value="paraopt.log"/>
              <list key="log">
                <parameter key="C"	value="operator.LibSVMLearner.parameter.C"/>
                <parameter key="degree"	value="operator.LibSVMLearner.parameter.degree"/>
                <parameter key="error"	value="operator.IteratingPerformanceAverage.value.performance"/>
              </list>
          </operator>
      </operator>
  </operator>

</process>
