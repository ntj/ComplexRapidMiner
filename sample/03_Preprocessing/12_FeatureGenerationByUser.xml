<operator name="Root" class="Process">
  <description text="#ylt#p#ygt# This experiment loads numerical data from file and generates some attributes with the feature generation operator. This operator also can generate attributes according to an attribute file which was saved to file beforehand. #ylt#/p#ygt#  #ylt#p#ygt# In this way it is not only possible to use the automatically created attribute but also user defined attributes. Therefore the parameter list #yquot#functions#yquot# of the generation operator must be edited. #ylt#/p#ygt#  #ylt#p#ygt# Try the following: #ylt#ul#ygt# #ylt#li#ygt#Start the experiment. Use breakpoints to check the generation step. The parameter #yquot#keep_all#yquot# defines if all attributes should be used for the result example set or only the newly generated ones.#ylt#/li#ygt# #ylt#li#ygt#Edit the parameter list #yquot#functions#yquot# and add some other functions. The functions are written in prefix order and most of the mathematical functions defined by Java can be used. Constant values are defined by #yquot#const[value]()#yquot#. Do not forget the empty brackets.#ylt#/li#ygt# #ylt#/ul#ygt# #ylt#/p#ygt#"/>
  <operator name="Input" class="ExampleSource">
    <parameter key="attributes"	value="../data/polynomial.aml"/>
  </operator>
  <operator name="Generation" class="FeatureGeneration">
    <list key="functions">
      <parameter key="sum"	value="+(a1,a2)"/>
      <parameter key="product"	value="*(a3,a4)"/>
      <parameter key="nested"	value="+(*(a1,a3),a4)"/>
    </list>
    <parameter key="keep_all"	value="true"/>
  </operator>
  <operator name="Output" class="ExampleSetWriter">
    <parameter key="example_set_file"	value="generated.dat"/>
  </operator>
</operator>

